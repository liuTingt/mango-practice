Ribbon是Netflix发布的负载均衡器，它有助于控制HTTP和TCP的客户端行为。为Ribbon配置服务提供者地址后，Ribbon就可基于
某种负载均衡算法自动地帮助服务消费者去请求，Ribbon默认为我们提供了很多算法，例如轮询、随机等。我们也可以为Ribbon实现自定义的
负载均衡算法。



修改负载均衡策略：
	在配置文件指定对应的负载均衡器即可
	
	
服务消费Feign
	添加跟调用目标方法一样的方法声明，只需要方法声明，不需要具体实现，注意跟目标方法定义保持一致，
	使用@FeignClient(name =“调用的服务名称”)
	
	
	
服务熔断Hystrix
	
	

改造：添加链路追踪（Sleuth、Zipkin）
	添加依赖、添加配置信息
	docker环境下Zipkin服务端启动失败，暂时无法测试链路追踪
	
	
配置中心Spring-Cloud-config
	spring-cloud-config客户端实现，修改consumer项目配置文件，添加配置中心。添加控制器读取配置中心文件，
	但是更新远程仓库中的配置文件，不能及时读取	最新数据，因为SpringBoot项目只有在启动的时候才会获取配置文
	件的内容，所以导致读取的信息依然是旧配置，这就引出Spring Cloud Bus
	
	Refresh机制
		Refresh机制是Spring Cloud Config提供的一种刷新机制，它允许客户端通过post方法出发各自的/refresh，
		只要依赖spring-boot-start-actuator包就拥有了/refresh的功能。在使用配置属性的类型中加上@RefreshScope
		这样在客户端执行/refresh的时候就会刷新此类下面的配置属性了。访问路径：http://localhost:8005/actuator/refresh
		但是手动刷新终究是麻烦的，当客户端一多就难以忍受了。解决的办法就是Spring Cloud Bus

消息总线Spring-Cloud-Bus
	添加bus-amqp依赖，修改配置文件(服务/客户端均修改)。
	Spring Cloud Bus进行配置更新的步骤如下：
		1、提交代码出发post请求给/actuator/bus-refresh
		2、Server端接收到请求并发送给Spring Cloud Bus
		3、Spring Cloud Bus接收到消息并通知给其他客户端
		4、其他客户端接收到消息，请求Server端获取最新配置
		5、全部客户端均获取到最新的配置
				
